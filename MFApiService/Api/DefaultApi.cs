/* 
 * API Rejestr WL
 *
 * Rejestr Podatnik√≥w VAT
 *
 * OpenAPI spec version: 1.6.0
 * Contact: WykazPodatnikow@mf.gov.pl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Exception = System.Exception;
using MFApiService.Client;
using MFApiService.Model;

namespace MFApiService.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Wyszukiwanie podmiotow po numerze konta
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccount">Numer rachunku bankowego</param>
        /// <param name="date"></param>
        /// <returns>EntityListResponse</returns>
        EntityListResponse BankAccountdate(string bankAccount, DateTime? date);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Wyszukiwanie podmiotow po numerze konta
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccount">Numer rachunku bankowego</param>
        /// <param name="date"></param>
        /// <returns>ApiResponse of EntityListResponse</returns>
        ApiResponse<EntityListResponse> BankAccountdateWithHttpInfo(string bankAccount, DateTime? date);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Wyszukiwanie podmiotow po numerach kont
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccounts">Lista maksymalnie 30 numerow rachunkow bankowych rozdzielonych przecinkami </param>
        /// <param name="date"></param>
        /// <returns>EntryListResponse</returns>
        EntryListResponse BankAccountsdate(string bankAccounts, DateTime? date);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Wyszukiwanie podmiotow po numerach kont
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccounts">Lista maksymalnie 30 numerow rachunkow bankowych rozdzielonych przecinkami </param>
        /// <param name="date"></param>
        /// <returns>ApiResponse of EntryListResponse</returns>
        ApiResponse<EntryListResponse> BankAccountsdateWithHttpInfo(string bankAccounts, DateTime? date);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sprawdzenie pojedynczego podmiotu po nip i numerze konta
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nip">Nip</param>
        /// <param name="bankAccount">Numer rachunku bankowego</param>
        /// <param name="date"></param>
        /// <returns>EntityCheckResponse</returns>
        EntityCheckResponse CheckNip(string nip, string bankAccount, DateTime? date);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sprawdzenie pojedynczego podmiotu po nip i numerze konta
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nip">Nip</param>
        /// <param name="bankAccount">Numer rachunku bankowego</param>
        /// <param name="date"></param>
        /// <returns>ApiResponse of EntityCheckResponse</returns>
        ApiResponse<EntityCheckResponse> CheckNipWithHttpInfo(string nip, string bankAccount, DateTime? date);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sprawdzenie pojedynczego podmiotu po regon i numerze konta
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="regon">Regon</param>
        /// <param name="bankAccount">Numer rachunku bankowego</param>
        /// <param name="date"></param>
        /// <returns>EntityCheckResponse</returns>
        EntityCheckResponse CheckRegon(string regon, string bankAccount, DateTime? date);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sprawdzenie pojedynczego podmiotu po regon i numerze konta
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="regon">Regon</param>
        /// <param name="bankAccount">Numer rachunku bankowego</param>
        /// <param name="date"></param>
        /// <returns>ApiResponse of EntityCheckResponse</returns>
        ApiResponse<EntityCheckResponse> CheckRegonWithHttpInfo(string regon, string bankAccount, DateTime? date);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Wyszukiwanie pojedynczego podmiotu po nip
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nip">Nip</param>
        /// <param name="date"></param>
        /// <returns>EntityResponse</returns>
        EntityResponse Nipdate(string nip, DateTime? date);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Wyszukiwanie pojedynczego podmiotu po nip
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nip">Nip</param>
        /// <param name="date"></param>
        /// <returns>ApiResponse of EntityResponse</returns>
        ApiResponse<EntityResponse> NipdateWithHttpInfo(string nip, DateTime? date);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Wyszukiwanie podmiotow po numerach nip
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nips">Lista maksymalnie 30 numerow NIP rozdzielonych przecinkami</param>
        /// <param name="date"></param>
        /// <returns>EntryListResponse</returns>
        EntryListResponse Nipsdate(string nips, DateTime? date);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Wyszukiwanie podmiotow po numerach nip
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nips">Lista maksymalnie 30 numerow NIP rozdzielonych przecinkami</param>
        /// <param name="date"></param>
        /// <returns>ApiResponse of EntryListResponse</returns>
        ApiResponse<EntryListResponse> NipsdateWithHttpInfo(string nips, DateTime? date);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Wyszukiwanie pojedynczego podmiotu po regon
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="regon">Regon</param>
        /// <param name="date"></param>
        /// <returns>EntityResponse</returns>
        EntityResponse Regondate(string regon, DateTime? date);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Wyszukiwanie pojedynczego podmiotu po regon
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="regon">Regon</param>
        /// <param name="date"></param>
        /// <returns>ApiResponse of EntityResponse</returns>
        ApiResponse<EntityResponse> RegondateWithHttpInfo(string regon, DateTime? date);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Wyszukiwanie podmiotow po numerach regon
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="regons">Regon</param>
        /// <param name="date"></param>
        /// <returns>EntryListResponse</returns>
        EntryListResponse Regonsdate(string regons, DateTime? date);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Wyszukiwanie podmiotow po numerach regon
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="regons">Regon</param>
        /// <param name="date"></param>
        /// <returns>ApiResponse of EntryListResponse</returns>
        ApiResponse<EntryListResponse> RegonsdateWithHttpInfo(string regons, DateTime? date);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Wyszukiwanie podmiotow po numerze konta
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccount">Numer rachunku bankowego</param>
        /// <param name="date"></param>
        /// <returns>Task of EntityListResponse</returns>
        Task<EntityListResponse> BankAccountdateAsync(string bankAccount, DateTime? date);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Wyszukiwanie podmiotow po numerze konta
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccount">Numer rachunku bankowego</param>
        /// <param name="date"></param>
        /// <returns>Task of ApiResponse (EntityListResponse)</returns>
        Task<ApiResponse<EntityListResponse>> BankAccountdateAsyncWithHttpInfo(string bankAccount, DateTime? date);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Wyszukiwanie podmiotow po numerach kont
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccounts">Lista maksymalnie 30 numerow rachunkow bankowych rozdzielonych przecinkami </param>
        /// <param name="date"></param>
        /// <returns>Task of EntryListResponse</returns>
        Task<EntryListResponse> BankAccountsdateAsync(string bankAccounts, DateTime? date);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Wyszukiwanie podmiotow po numerach kont
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccounts">Lista maksymalnie 30 numerow rachunkow bankowych rozdzielonych przecinkami </param>
        /// <param name="date"></param>
        /// <returns>Task of ApiResponse (EntryListResponse)</returns>
        Task<ApiResponse<EntryListResponse>> BankAccountsdateAsyncWithHttpInfo(string bankAccounts, DateTime? date);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sprawdzenie pojedynczego podmiotu po nip i numerze konta
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nip">Nip</param>
        /// <param name="bankAccount">Numer rachunku bankowego</param>
        /// <param name="date"></param>
        /// <returns>Task of EntityCheckResponse</returns>
        Task<EntityCheckResponse> CheckNipAsync(string nip, string bankAccount, DateTime? date);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sprawdzenie pojedynczego podmiotu po nip i numerze konta
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nip">Nip</param>
        /// <param name="bankAccount">Numer rachunku bankowego</param>
        /// <param name="date"></param>
        /// <returns>Task of ApiResponse (EntityCheckResponse)</returns>
        Task<ApiResponse<EntityCheckResponse>> CheckNipAsyncWithHttpInfo(string nip, string bankAccount, DateTime? date);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sprawdzenie pojedynczego podmiotu po regon i numerze konta
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="regon">Regon</param>
        /// <param name="bankAccount">Numer rachunku bankowego</param>
        /// <param name="date"></param>
        /// <returns>Task of EntityCheckResponse</returns>
        Task<EntityCheckResponse> CheckRegonAsync(string regon, string bankAccount, DateTime? date);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sprawdzenie pojedynczego podmiotu po regon i numerze konta
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="regon">Regon</param>
        /// <param name="bankAccount">Numer rachunku bankowego</param>
        /// <param name="date"></param>
        /// <returns>Task of ApiResponse (EntityCheckResponse)</returns>
        Task<ApiResponse<EntityCheckResponse>> CheckRegonAsyncWithHttpInfo(string regon, string bankAccount, DateTime? date);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Wyszukiwanie pojedynczego podmiotu po nip
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nip">Nip</param>
        /// <param name="date"></param>
        /// <returns>Task of EntityResponse</returns>
        Task<EntityResponse> NipdateAsync(string nip, DateTime? date);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Wyszukiwanie pojedynczego podmiotu po nip
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nip">Nip</param>
        /// <param name="date"></param>
        /// <returns>Task of ApiResponse (EntityResponse)</returns>
        Task<ApiResponse<EntityResponse>> NipdateAsyncWithHttpInfo(string nip, DateTime? date);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Wyszukiwanie podmiotow po numerach nip
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nips">Lista maksymalnie 30 numerow NIP rozdzielonych przecinkami</param>
        /// <param name="date"></param>
        /// <returns>Task of EntryListResponse</returns>
        Task<EntryListResponse> NipsdateAsync(string nips, DateTime? date);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Wyszukiwanie podmiotow po numerach nip
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nips">Lista maksymalnie 30 numerow NIP rozdzielonych przecinkami</param>
        /// <param name="date"></param>
        /// <returns>Task of ApiResponse (EntryListResponse)</returns>
        Task<ApiResponse<EntryListResponse>> NipsdateAsyncWithHttpInfo(string nips, DateTime? date);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Wyszukiwanie pojedynczego podmiotu po regon
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="regon">Regon</param>
        /// <param name="date"></param>
        /// <returns>Task of EntityResponse</returns>
        Task<EntityResponse> RegondateAsync(string regon, DateTime? date);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Wyszukiwanie pojedynczego podmiotu po regon
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="regon">Regon</param>
        /// <param name="date"></param>
        /// <returns>Task of ApiResponse (EntityResponse)</returns>
        Task<ApiResponse<EntityResponse>> RegondateAsyncWithHttpInfo(string regon, DateTime? date);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Wyszukiwanie podmiotow po numerach regon
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="regons">Regon</param>
        /// <param name="date"></param>
        /// <returns>Task of EntryListResponse</returns>
        Task<EntryListResponse> RegonsdateAsync(string regons, DateTime? date);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Wyszukiwanie podmiotow po numerach regon
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="regons">Regon</param>
        /// <param name="date"></param>
        /// <returns>Task of ApiResponse (EntryListResponse)</returns>
        Task<ApiResponse<EntryListResponse>> RegonsdateAsyncWithHttpInfo(string regons, DateTime? date);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            Configuration = Configuration.Default;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Wyszukiwanie podmiotow po numerze konta
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccount">Numer rachunku bankowego</param>
        /// <param name="date"></param>
        /// <returns>EntityListResponse</returns>
        public EntityListResponse BankAccountdate(string bankAccount, DateTime? date)
        {
            ApiResponse<EntityListResponse> localVarResponse = BankAccountdateWithHttpInfo(bankAccount, date);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Wyszukiwanie podmiotow po numerze konta
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccount">Numer rachunku bankowego</param>
        /// <param name="date"></param>
        /// <returns>ApiResponse of EntityListResponse</returns>
        public ApiResponse<EntityListResponse> BankAccountdateWithHttpInfo(string bankAccount, DateTime? date)
        {
            // verify the required parameter 'bankAccount' is set
            if (bankAccount == null)
                throw new ApiException(400, "Missing required parameter 'bankAccount' when calling DefaultApi->BankAccountdate");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling DefaultApi->BankAccountdate");

            var localVarPath = "/api/search/bank-account/{bank-account}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bankAccount != null) localVarPathParams.Add("bank-account", Configuration.ApiClient.ParameterToString(bankAccount)); // path parameter
            if (date != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BankAccountdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntityListResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityListResponse)));
        }

        /// <summary>
        ///  Wyszukiwanie podmiotow po numerze konta
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccount">Numer rachunku bankowego</param>
        /// <param name="date"></param>
        /// <returns>Task of EntityListResponse</returns>
        public async Task<EntityListResponse> BankAccountdateAsync(string bankAccount, DateTime? date)
        {
            ApiResponse<EntityListResponse> localVarResponse = await BankAccountdateAsyncWithHttpInfo(bankAccount, date);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Wyszukiwanie podmiotow po numerze konta
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccount">Numer rachunku bankowego</param>
        /// <param name="date"></param>
        /// <returns>Task of ApiResponse (EntityListResponse)</returns>
        public async Task<ApiResponse<EntityListResponse>> BankAccountdateAsyncWithHttpInfo(string bankAccount, DateTime? date)
        {
            // verify the required parameter 'bankAccount' is set
            if (bankAccount == null)
                throw new ApiException(400, "Missing required parameter 'bankAccount' when calling DefaultApi->BankAccountdate");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling DefaultApi->BankAccountdate");

            var localVarPath = "/api/search/bank-account/{bank-account}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bankAccount != null) localVarPathParams.Add("bank-account", Configuration.ApiClient.ParameterToString(bankAccount)); // path parameter
            if (date != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BankAccountdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntityListResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityListResponse)));
        }

        /// <summary>
        ///  Wyszukiwanie podmiotow po numerach kont
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccounts">Lista maksymalnie 30 numerow rachunkow bankowych rozdzielonych przecinkami </param>
        /// <param name="date"></param>
        /// <returns>EntryListResponse</returns>
        public EntryListResponse BankAccountsdate(string bankAccounts, DateTime? date)
        {
            ApiResponse<EntryListResponse> localVarResponse = BankAccountsdateWithHttpInfo(bankAccounts, date);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Wyszukiwanie podmiotow po numerach kont
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccounts">Lista maksymalnie 30 numerow rachunkow bankowych rozdzielonych przecinkami </param>
        /// <param name="date"></param>
        /// <returns>ApiResponse of EntryListResponse</returns>
        public ApiResponse<EntryListResponse> BankAccountsdateWithHttpInfo(string bankAccounts, DateTime? date)
        {
            // verify the required parameter 'bankAccounts' is set
            if (bankAccounts == null)
                throw new ApiException(400, "Missing required parameter 'bankAccounts' when calling DefaultApi->BankAccountsdate");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling DefaultApi->BankAccountsdate");

            var localVarPath = "/api/search/bank-accounts/{bank-accounts}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bankAccounts != null) localVarPathParams.Add("bank-accounts", Configuration.ApiClient.ParameterToString(bankAccounts)); // path parameter
            if (date != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BankAccountsdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntryListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntryListResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntryListResponse)));
        }

        /// <summary>
        ///  Wyszukiwanie podmiotow po numerach kont
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccounts">Lista maksymalnie 30 numerow rachunkow bankowych rozdzielonych przecinkami </param>
        /// <param name="date"></param>
        /// <returns>Task of EntryListResponse</returns>
        public async Task<EntryListResponse> BankAccountsdateAsync(string bankAccounts, DateTime? date)
        {
            ApiResponse<EntryListResponse> localVarResponse = await BankAccountsdateAsyncWithHttpInfo(bankAccounts, date);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Wyszukiwanie podmiotow po numerach kont
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccounts">Lista maksymalnie 30 numerow rachunkow bankowych rozdzielonych przecinkami </param>
        /// <param name="date"></param>
        /// <returns>Task of ApiResponse (EntryListResponse)</returns>
        public async Task<ApiResponse<EntryListResponse>> BankAccountsdateAsyncWithHttpInfo(string bankAccounts, DateTime? date)
        {
            // verify the required parameter 'bankAccounts' is set
            if (bankAccounts == null)
                throw new ApiException(400, "Missing required parameter 'bankAccounts' when calling DefaultApi->BankAccountsdate");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling DefaultApi->BankAccountsdate");

            var localVarPath = "/api/search/bank-accounts/{bank-accounts}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bankAccounts != null) localVarPathParams.Add("bank-accounts", Configuration.ApiClient.ParameterToString(bankAccounts)); // path parameter
            if (date != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BankAccountsdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntryListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntryListResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntryListResponse)));
        }

        /// <summary>
        ///  Sprawdzenie pojedynczego podmiotu po nip i numerze konta
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nip">Nip</param>
        /// <param name="bankAccount">Numer rachunku bankowego</param>
        /// <param name="date"></param>
        /// <returns>EntityCheckResponse</returns>
        public EntityCheckResponse CheckNip(string nip, string bankAccount, DateTime? date)
        {
            ApiResponse<EntityCheckResponse> localVarResponse = CheckNipWithHttpInfo(nip, bankAccount, date);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Sprawdzenie pojedynczego podmiotu po nip i numerze konta
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nip">Nip</param>
        /// <param name="bankAccount">Numer rachunku bankowego</param>
        /// <param name="date"></param>
        /// <returns>ApiResponse of EntityCheckResponse</returns>
        public ApiResponse<EntityCheckResponse> CheckNipWithHttpInfo(string nip, string bankAccount, DateTime? date)
        {
            // verify the required parameter 'nip' is set
            if (nip == null)
                throw new ApiException(400, "Missing required parameter 'nip' when calling DefaultApi->CheckNip");
            // verify the required parameter 'bankAccount' is set
            if (bankAccount == null)
                throw new ApiException(400, "Missing required parameter 'bankAccount' when calling DefaultApi->CheckNip");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling DefaultApi->CheckNip");

            var localVarPath = "/api/check/nip/{nip}/bank-account/{bank-account}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nip != null) localVarPathParams.Add("nip", Configuration.ApiClient.ParameterToString(nip)); // path parameter
            if (bankAccount != null) localVarPathParams.Add("bank-account", Configuration.ApiClient.ParameterToString(bankAccount)); // path parameter
            if (date != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckNip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntityCheckResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityCheckResponse)));
        }

        /// <summary>
        ///  Sprawdzenie pojedynczego podmiotu po nip i numerze konta
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nip">Nip</param>
        /// <param name="bankAccount">Numer rachunku bankowego</param>
        /// <param name="date"></param>
        /// <returns>Task of EntityCheckResponse</returns>
        public async Task<EntityCheckResponse> CheckNipAsync(string nip, string bankAccount, DateTime? date)
        {
            ApiResponse<EntityCheckResponse> localVarResponse = await CheckNipAsyncWithHttpInfo(nip, bankAccount, date);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Sprawdzenie pojedynczego podmiotu po nip i numerze konta
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nip">Nip</param>
        /// <param name="bankAccount">Numer rachunku bankowego</param>
        /// <param name="date"></param>
        /// <returns>Task of ApiResponse (EntityCheckResponse)</returns>
        public async Task<ApiResponse<EntityCheckResponse>> CheckNipAsyncWithHttpInfo(string nip, string bankAccount, DateTime? date)
        {
            // verify the required parameter 'nip' is set
            if (nip == null)
                throw new ApiException(400, "Missing required parameter 'nip' when calling DefaultApi->CheckNip");
            // verify the required parameter 'bankAccount' is set
            if (bankAccount == null)
                throw new ApiException(400, "Missing required parameter 'bankAccount' when calling DefaultApi->CheckNip");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling DefaultApi->CheckNip");

            var localVarPath = "/api/check/nip/{nip}/bank-account/{bank-account}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nip != null) localVarPathParams.Add("nip", Configuration.ApiClient.ParameterToString(nip)); // path parameter
            if (bankAccount != null) localVarPathParams.Add("bank-account", Configuration.ApiClient.ParameterToString(bankAccount)); // path parameter
            if (date != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckNip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntityCheckResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityCheckResponse)));
        }

        /// <summary>
        ///  Sprawdzenie pojedynczego podmiotu po regon i numerze konta
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="regon">Regon</param>
        /// <param name="bankAccount">Numer rachunku bankowego</param>
        /// <param name="date"></param>
        /// <returns>EntityCheckResponse</returns>
        public EntityCheckResponse CheckRegon(string regon, string bankAccount, DateTime? date)
        {
            ApiResponse<EntityCheckResponse> localVarResponse = CheckRegonWithHttpInfo(regon, bankAccount, date);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Sprawdzenie pojedynczego podmiotu po regon i numerze konta
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="regon">Regon</param>
        /// <param name="bankAccount">Numer rachunku bankowego</param>
        /// <param name="date"></param>
        /// <returns>ApiResponse of EntityCheckResponse</returns>
        public ApiResponse<EntityCheckResponse> CheckRegonWithHttpInfo(string regon, string bankAccount, DateTime? date)
        {
            // verify the required parameter 'regon' is set
            if (regon == null)
                throw new ApiException(400, "Missing required parameter 'regon' when calling DefaultApi->CheckRegon");
            // verify the required parameter 'bankAccount' is set
            if (bankAccount == null)
                throw new ApiException(400, "Missing required parameter 'bankAccount' when calling DefaultApi->CheckRegon");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling DefaultApi->CheckRegon");

            var localVarPath = "/api/check/regon/{regon}/bank-account/{bank-account}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (regon != null) localVarPathParams.Add("regon", Configuration.ApiClient.ParameterToString(regon)); // path parameter
            if (bankAccount != null) localVarPathParams.Add("bank-account", Configuration.ApiClient.ParameterToString(bankAccount)); // path parameter
            if (date != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckRegon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntityCheckResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityCheckResponse)));
        }

        /// <summary>
        ///  Sprawdzenie pojedynczego podmiotu po regon i numerze konta
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="regon">Regon</param>
        /// <param name="bankAccount">Numer rachunku bankowego</param>
        /// <param name="date"></param>
        /// <returns>Task of EntityCheckResponse</returns>
        public async Task<EntityCheckResponse> CheckRegonAsync(string regon, string bankAccount, DateTime? date)
        {
            ApiResponse<EntityCheckResponse> localVarResponse = await CheckRegonAsyncWithHttpInfo(regon, bankAccount, date);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Sprawdzenie pojedynczego podmiotu po regon i numerze konta
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="regon">Regon</param>
        /// <param name="bankAccount">Numer rachunku bankowego</param>
        /// <param name="date"></param>
        /// <returns>Task of ApiResponse (EntityCheckResponse)</returns>
        public async Task<ApiResponse<EntityCheckResponse>> CheckRegonAsyncWithHttpInfo(string regon, string bankAccount, DateTime? date)
        {
            // verify the required parameter 'regon' is set
            if (regon == null)
                throw new ApiException(400, "Missing required parameter 'regon' when calling DefaultApi->CheckRegon");
            // verify the required parameter 'bankAccount' is set
            if (bankAccount == null)
                throw new ApiException(400, "Missing required parameter 'bankAccount' when calling DefaultApi->CheckRegon");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling DefaultApi->CheckRegon");

            var localVarPath = "/api/check/regon/{regon}/bank-account/{bank-account}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (regon != null) localVarPathParams.Add("regon", Configuration.ApiClient.ParameterToString(regon)); // path parameter
            if (bankAccount != null) localVarPathParams.Add("bank-account", Configuration.ApiClient.ParameterToString(bankAccount)); // path parameter
            if (date != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckRegon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntityCheckResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityCheckResponse)));
        }

        /// <summary>
        ///  Wyszukiwanie pojedynczego podmiotu po nip
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nip">Nip</param>
        /// <param name="date"></param>
        /// <returns>EntityResponse</returns>
        public EntityResponse Nipdate(string nip, DateTime? date)
        {
            ApiResponse<EntityResponse> localVarResponse = NipdateWithHttpInfo(nip, date);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Wyszukiwanie pojedynczego podmiotu po nip
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nip">Nip</param>
        /// <param name="date"></param>
        /// <returns>ApiResponse of EntityResponse</returns>
        public ApiResponse<EntityResponse> NipdateWithHttpInfo(string nip, DateTime? date)
        {
            // verify the required parameter 'nip' is set
            if (nip == null)
                throw new ApiException(400, "Missing required parameter 'nip' when calling DefaultApi->Nipdate");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling DefaultApi->Nipdate");

            var localVarPath = "/api/search/nip/{nip}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nip != null) localVarPathParams.Add("nip", Configuration.ApiClient.ParameterToString(nip)); // path parameter
            if (date != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Nipdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntityResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityResponse)));
        }

        /// <summary>
        ///  Wyszukiwanie pojedynczego podmiotu po nip
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nip">Nip</param>
        /// <param name="date"></param>
        /// <returns>Task of EntityResponse</returns>
        public async Task<EntityResponse> NipdateAsync(string nip, DateTime? date)
        {
            ApiResponse<EntityResponse> localVarResponse = await NipdateAsyncWithHttpInfo(nip, date);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Wyszukiwanie pojedynczego podmiotu po nip
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nip">Nip</param>
        /// <param name="date"></param>
        /// <returns>Task of ApiResponse (EntityResponse)</returns>
        public async Task<ApiResponse<EntityResponse>> NipdateAsyncWithHttpInfo(string nip, DateTime? date)
        {
            // verify the required parameter 'nip' is set
            if (nip == null)
                throw new ApiException(400, "Missing required parameter 'nip' when calling DefaultApi->Nipdate");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling DefaultApi->Nipdate");

            var localVarPath = "/api/search/nip/{nip}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nip != null) localVarPathParams.Add("nip", Configuration.ApiClient.ParameterToString(nip)); // path parameter
            if (date != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date.Value.ToString("yyyy-MM-dd"))); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Nipdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return  new ApiResponse<EntityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntityResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityResponse)));
        }

        /// <summary>
        ///  Wyszukiwanie podmiotow po numerach nip
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nips">Lista maksymalnie 30 numerow NIP rozdzielonych przecinkami</param>
        /// <param name="date"></param>
        /// <returns>EntryListResponse</returns>
        public EntryListResponse Nipsdate(string nips, DateTime? date)
        {
            ApiResponse<EntryListResponse> localVarResponse = NipsdateWithHttpInfo(nips, date);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Wyszukiwanie podmiotow po numerach nip
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nips">Lista maksymalnie 30 numerow NIP rozdzielonych przecinkami</param>
        /// <param name="date"></param>
        /// <returns>ApiResponse of EntryListResponse</returns>
        public ApiResponse<EntryListResponse> NipsdateWithHttpInfo(string nips, DateTime? date)
        {
            // verify the required parameter 'nips' is set
            if (nips == null)
                throw new ApiException(400, "Missing required parameter 'nips' when calling DefaultApi->Nipsdate");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling DefaultApi->Nipsdate");

            var localVarPath = "/api/search/nips/{nips}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nips != null) localVarPathParams.Add("nips", Configuration.ApiClient.ParameterToString(nips)); // path parameter
            if (date != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date.Value.ToString("yyyy-MM-dd"))); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Nipsdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntryListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntryListResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntryListResponse)));
        }

        /// <summary>
        ///  Wyszukiwanie podmiotow po numerach nip
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nips">Lista maksymalnie 30 numerow NIP rozdzielonych przecinkami</param>
        /// <param name="date"></param>
        /// <returns>Task of EntryListResponse</returns>
        public async Task<EntryListResponse> NipsdateAsync(string nips, DateTime? date)
        {
            ApiResponse<EntryListResponse> localVarResponse = await NipsdateAsyncWithHttpInfo(nips, date);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Wyszukiwanie podmiotow po numerach nip
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nips">Lista maksymalnie 30 numerow NIP rozdzielonych przecinkami</param>
        /// <param name="date"></param>
        /// <returns>Task of ApiResponse (EntryListResponse)</returns>
        public async Task<ApiResponse<EntryListResponse>> NipsdateAsyncWithHttpInfo(string nips, DateTime? date)
        {
            // verify the required parameter 'nips' is set
            if (nips == null)
                throw new ApiException(400, "Missing required parameter 'nips' when calling DefaultApi->Nipsdate");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling DefaultApi->Nipsdate");

            var localVarPath = "/api/search/nips/{nips}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nips != null) localVarPathParams.Add("nips", Configuration.ApiClient.ParameterToString(nips)); // path parameter
            if (date != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Nipsdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntryListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntryListResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntryListResponse)));
        }

        /// <summary>
        ///  Wyszukiwanie pojedynczego podmiotu po regon
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="regon">Regon</param>
        /// <param name="date"></param>
        /// <returns>EntityResponse</returns>
        public EntityResponse Regondate(string regon, DateTime? date)
        {
            ApiResponse<EntityResponse> localVarResponse = RegondateWithHttpInfo(regon, date);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Wyszukiwanie pojedynczego podmiotu po regon
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="regon">Regon</param>
        /// <param name="date"></param>
        /// <returns>ApiResponse of EntityResponse</returns>
        public ApiResponse<EntityResponse> RegondateWithHttpInfo(string regon, DateTime? date)
        {
            // verify the required parameter 'regon' is set
            if (regon == null)
                throw new ApiException(400, "Missing required parameter 'regon' when calling DefaultApi->Regondate");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling DefaultApi->Regondate");

            var localVarPath = "/api/search/regon/{regon}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (regon != null) localVarPathParams.Add("regon", Configuration.ApiClient.ParameterToString(regon)); // path parameter
            if (date != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Regondate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntityResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityResponse)));
        }

        /// <summary>
        ///  Wyszukiwanie pojedynczego podmiotu po regon
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="regon">Regon</param>
        /// <param name="date"></param>
        /// <returns>Task of EntityResponse</returns>
        public async Task<EntityResponse> RegondateAsync(string regon, DateTime? date)
        {
            ApiResponse<EntityResponse> localVarResponse = await RegondateAsyncWithHttpInfo(regon, date);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Wyszukiwanie pojedynczego podmiotu po regon
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="regon">Regon</param>
        /// <param name="date"></param>
        /// <returns>Task of ApiResponse (EntityResponse)</returns>
        public async Task<ApiResponse<EntityResponse>> RegondateAsyncWithHttpInfo(string regon, DateTime? date)
        {
            // verify the required parameter 'regon' is set
            if (regon == null)
                throw new ApiException(400, "Missing required parameter 'regon' when calling DefaultApi->Regondate");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling DefaultApi->Regondate");

            var localVarPath = "/api/search/regon/{regon}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (regon != null) localVarPathParams.Add("regon", Configuration.ApiClient.ParameterToString(regon)); // path parameter
            if (date != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date.Value.ToString("yyyy-MM-dd"))); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Regondate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntityResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityResponse)));
        }

        /// <summary>
        ///  Wyszukiwanie podmiotow po numerach regon
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="regons">Regon</param>
        /// <param name="date"></param>
        /// <returns>EntryListResponse</returns>
        public EntryListResponse Regonsdate(string regons, DateTime? date)
        {
            ApiResponse<EntryListResponse> localVarResponse = RegonsdateWithHttpInfo(regons, date);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Wyszukiwanie podmiotow po numerach regon
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="regons">Regon</param>
        /// <param name="date"></param>
        /// <returns>ApiResponse of EntryListResponse</returns>
        public ApiResponse<EntryListResponse> RegonsdateWithHttpInfo(string regons, DateTime? date)
        {
            // verify the required parameter 'regons' is set
            if (regons == null)
                throw new ApiException(400, "Missing required parameter 'regons' when calling DefaultApi->Regonsdate");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling DefaultApi->Regonsdate");

            var localVarPath = "/api/search/regons/{regons}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (regons != null) localVarPathParams.Add("regons", Configuration.ApiClient.ParameterToString(regons)); // path parameter
            if (date != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Regonsdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntryListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntryListResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntryListResponse)));
        }

        /// <summary>
        ///  Wyszukiwanie podmiotow po numerach regon
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="regons">Regon</param>
        /// <param name="date"></param>
        /// <returns>Task of EntryListResponse</returns>
        public async Task<EntryListResponse> RegonsdateAsync(string regons, DateTime? date)
        {
            ApiResponse<EntryListResponse> localVarResponse = await RegonsdateAsyncWithHttpInfo(regons, date);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Wyszukiwanie podmiotow po numerach regon
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="regons">Regon</param>
        /// <param name="date"></param>
        /// <returns>Task of ApiResponse (EntryListResponse)</returns>
        public async Task<ApiResponse<EntryListResponse>> RegonsdateAsyncWithHttpInfo(string regons, DateTime? date)
        {
            // verify the required parameter 'regons' is set
            if (regons == null)
                throw new ApiException(400, "Missing required parameter 'regons' when calling DefaultApi->Regonsdate");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling DefaultApi->Regonsdate");

            var localVarPath = "/api/search/regons/{regons}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (regons != null) localVarPathParams.Add("regons", Configuration.ApiClient.ParameterToString(regons)); // path parameter
            if (date != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Regonsdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntryListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntryListResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntryListResponse)));
        }

    }
}
