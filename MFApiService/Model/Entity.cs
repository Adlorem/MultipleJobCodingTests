/* 
 * API Rejestr WL
 *
 * Rejestr Podatników VAT
 *
 * OpenAPI spec version: 1.6.0
 * Contact: WykazPodatnikow@mf.gov.pl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = MFApiService.Client.SwaggerDateConverter;

namespace MFApiService.Model
{
    /// <summary>
    /// Entity
    /// </summary>
    [DataContract]
    public partial class Entity : IEquatable<Entity>, IValidatableObject
    {
        /// <summary>
        /// Status podatnika VAT. 
        /// </summary>
        /// <value>Status podatnika VAT. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusVatEnum
        {
            /// <summary>
            /// Enum Czynny for value: Czynny
            /// </summary>
            [EnumMember(Value = "Czynny")]
            Czynny = 1,
            /// <summary>
            /// Enum Zwolniony for value: Zwolniony
            /// </summary>
            [EnumMember(Value = "Zwolniony")]
            Zwolniony = 2,
            /// <summary>
            /// Enum Niezarejestrowany for value: Niezarejestrowany
            /// </summary>
            [EnumMember(Value = "Niezarejestrowany")]
            Niezarejestrowany = 3
        }
        /// <summary>
        /// Status podatnika VAT. 
        /// </summary>
        /// <value>Status podatnika VAT. </value>
        [DataMember(Name = "statusVat", EmitDefaultValue = false)]
        public StatusVatEnum? StatusVat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Entity" /> class.
        /// </summary>
        /// <param name="name">Firma (nazwa) lub imię i nazwisko  (required).</param>
        /// <param name="nip">nip.</param>
        /// <param name="statusVat">Status podatnika VAT. .</param>
        /// <param name="regon">Numer identyfikacyjny REGON .</param>
        /// <param name="pesel">pesel.</param>
        /// <param name="krs">numer KRS jeżeli został nadany .</param>
        /// <param name="residenceAddress">Adres siedziby działalności gospodarczej (Adres siedziby OSOBY FIZYCZNEJ prowadzącej działalność gospodarczą) .</param>
        /// <param name="workingAddress">Adres rejestracyjny (Adres zamieszkania OSOBY FIZYCZNEJ lub adres siedziby ORGANIZACJI.). .</param>
        /// <param name="representatives">Imiona i nazwiska osób wchodzących w skład organu uprawnionego do reprezentowania podmiotu oraz ich numery NIP i/lub PESEL .</param>
        /// <param name="authorizedClerks">Imiona i nazwiska prokurentów oraz ich numery NIP i/lub PESEL .</param>
        /// <param name="partners">Imiona i nazwiska lub firmę (nazwa) wspólnika oraz jego numeryNIP i/lub PESEL .</param>
        /// <param name="registrationLegalDate">Data rejestracji jako podatnika VAT .</param>
        /// <param name="registrationDenialDate">Data odmowy rejestracji jako podatnika VAT .</param>
        /// <param name="registrationDenialBasis">Podstawa prawna odmowy rejestracji .</param>
        /// <param name="restorationDate">Data przywrócenia jako podatnika VAT .</param>
        /// <param name="restorationBasis">Podstawa prawna przywrócenia jako podatnika VAT .</param>
        /// <param name="removalDate">Data wykreślenia odmowy rejestracji jako podatnika VAT .</param>
        /// <param name="removalBasis">Podstawa prawna wykreślenia odmowy rejestracji jako podatnika VAT .</param>
        /// <param name="accountNumbers">accountNumbers.</param>
        /// <param name="hasVirtualAccounts">Podmiot posiada maski kont wirtualnych .</param>
        public Entity(string name = default, string nip = default, StatusVatEnum? statusVat = default, string regon = default, string pesel = default, string krs = default, string residenceAddress = default, string workingAddress = default, List<EntityPerson> representatives = default, List<EntityPerson> authorizedClerks = default, List<EntityPerson> partners = default, DateTime? registrationLegalDate = default, DateTime? registrationDenialDate = default, string registrationDenialBasis = default, DateTime? restorationDate = default, string restorationBasis = default, DateTime? removalDate = default, string removalBasis = default, List<string> accountNumbers = default, bool? hasVirtualAccounts = default)
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Entity and cannot be null");
            }
            else
            {
                Name = name;
            }
            Nip = nip;
            StatusVat = statusVat;
            Regon = regon;
            Pesel = pesel;
            Krs = krs;
            ResidenceAddress = residenceAddress;
            WorkingAddress = workingAddress;
            Representatives = representatives;
            AuthorizedClerks = authorizedClerks;
            Partners = partners;
            RegistrationLegalDate = registrationLegalDate;
            RegistrationDenialDate = registrationDenialDate;
            RegistrationDenialBasis = registrationDenialBasis;
            RestorationDate = restorationDate;
            RestorationBasis = restorationBasis;
            RemovalDate = removalDate;
            RemovalBasis = removalBasis;
            AccountNumbers = accountNumbers;
            HasVirtualAccounts = hasVirtualAccounts;
        }

        /// <summary>
        /// Firma (nazwa) lub imię i nazwisko 
        /// </summary>
        /// <value>Firma (nazwa) lub imię i nazwisko </value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Nip
        /// </summary>
        [DataMember(Name = "nip", EmitDefaultValue = false)]
        public string Nip { get; set; }


        /// <summary>
        /// Numer identyfikacyjny REGON 
        /// </summary>
        /// <value>Numer identyfikacyjny REGON </value>
        [DataMember(Name = "regon", EmitDefaultValue = false)]
        public string Regon { get; set; }

        /// <summary>
        /// Gets or Sets Pesel
        /// </summary>
        [DataMember(Name = "pesel", EmitDefaultValue = false)]
        public string Pesel { get; set; }

        /// <summary>
        /// numer KRS jeżeli został nadany 
        /// </summary>
        /// <value>numer KRS jeżeli został nadany </value>
        [DataMember(Name = "krs", EmitDefaultValue = false)]
        public string Krs { get; set; }

        /// <summary>
        /// Adres siedziby działalności gospodarczej (Adres siedziby OSOBY FIZYCZNEJ prowadzącej działalność gospodarczą) 
        /// </summary>
        /// <value>Adres siedziby działalności gospodarczej (Adres siedziby OSOBY FIZYCZNEJ prowadzącej działalność gospodarczą) </value>
        [DataMember(Name = "residenceAddress", EmitDefaultValue = false)]
        public string ResidenceAddress { get; set; }

        /// <summary>
        /// Adres rejestracyjny (Adres zamieszkania OSOBY FIZYCZNEJ lub adres siedziby ORGANIZACJI.). 
        /// </summary>
        /// <value>Adres rejestracyjny (Adres zamieszkania OSOBY FIZYCZNEJ lub adres siedziby ORGANIZACJI.). </value>
        [DataMember(Name = "workingAddress", EmitDefaultValue = false)]
        public string WorkingAddress { get; set; }

        /// <summary>
        /// Imiona i nazwiska osób wchodzących w skład organu uprawnionego do reprezentowania podmiotu oraz ich numery NIP i/lub PESEL 
        /// </summary>
        /// <value>Imiona i nazwiska osób wchodzących w skład organu uprawnionego do reprezentowania podmiotu oraz ich numery NIP i/lub PESEL </value>
        [DataMember(Name = "representatives", EmitDefaultValue = false)]
        public List<EntityPerson> Representatives { get; set; }

        /// <summary>
        /// Imiona i nazwiska prokurentów oraz ich numery NIP i/lub PESEL 
        /// </summary>
        /// <value>Imiona i nazwiska prokurentów oraz ich numery NIP i/lub PESEL </value>
        [DataMember(Name = "authorizedClerks", EmitDefaultValue = false)]
        public List<EntityPerson> AuthorizedClerks { get; set; }

        /// <summary>
        /// Imiona i nazwiska lub firmę (nazwa) wspólnika oraz jego numeryNIP i/lub PESEL 
        /// </summary>
        /// <value>Imiona i nazwiska lub firmę (nazwa) wspólnika oraz jego numeryNIP i/lub PESEL </value>
        [DataMember(Name = "partners", EmitDefaultValue = false)]
        public List<EntityPerson> Partners { get; set; }

        /// <summary>
        /// Data rejestracji jako podatnika VAT 
        /// </summary>
        /// <value>Data rejestracji jako podatnika VAT </value>
        [DataMember(Name = "registrationLegalDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? RegistrationLegalDate { get; set; }

        /// <summary>
        /// Data odmowy rejestracji jako podatnika VAT 
        /// </summary>
        /// <value>Data odmowy rejestracji jako podatnika VAT </value>
        [DataMember(Name = "registrationDenialDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? RegistrationDenialDate { get; set; }

        /// <summary>
        /// Podstawa prawna odmowy rejestracji 
        /// </summary>
        /// <value>Podstawa prawna odmowy rejestracji </value>
        [DataMember(Name = "registrationDenialBasis", EmitDefaultValue = false)]
        public string RegistrationDenialBasis { get; set; }

        /// <summary>
        /// Data przywrócenia jako podatnika VAT 
        /// </summary>
        /// <value>Data przywrócenia jako podatnika VAT </value>
        [DataMember(Name = "restorationDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? RestorationDate { get; set; }

        /// <summary>
        /// Podstawa prawna przywrócenia jako podatnika VAT 
        /// </summary>
        /// <value>Podstawa prawna przywrócenia jako podatnika VAT </value>
        [DataMember(Name = "restorationBasis", EmitDefaultValue = false)]
        public string RestorationBasis { get; set; }

        /// <summary>
        /// Data wykreślenia odmowy rejestracji jako podatnika VAT 
        /// </summary>
        /// <value>Data wykreślenia odmowy rejestracji jako podatnika VAT </value>
        [DataMember(Name = "removalDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? RemovalDate { get; set; }

        /// <summary>
        /// Podstawa prawna wykreślenia odmowy rejestracji jako podatnika VAT 
        /// </summary>
        /// <value>Podstawa prawna wykreślenia odmowy rejestracji jako podatnika VAT </value>
        [DataMember(Name = "removalBasis", EmitDefaultValue = false)]
        public string RemovalBasis { get; set; }

        /// <summary>
        /// Gets or Sets AccountNumbers
        /// </summary>
        [DataMember(Name = "accountNumbers", EmitDefaultValue = false)]
        public List<string> AccountNumbers { get; set; }

        /// <summary>
        /// Podmiot posiada maski kont wirtualnych 
        /// </summary>
        /// <value>Podmiot posiada maski kont wirtualnych </value>
        [DataMember(Name = "hasVirtualAccounts", EmitDefaultValue = false)]
        public bool? HasVirtualAccounts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Entity {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Nip: ").Append(Nip).Append("\n");
            sb.Append("  StatusVat: ").Append(StatusVat).Append("\n");
            sb.Append("  Regon: ").Append(Regon).Append("\n");
            sb.Append("  Pesel: ").Append(Pesel).Append("\n");
            sb.Append("  Krs: ").Append(Krs).Append("\n");
            sb.Append("  ResidenceAddress: ").Append(ResidenceAddress).Append("\n");
            sb.Append("  WorkingAddress: ").Append(WorkingAddress).Append("\n");
            sb.Append("  Representatives: ").Append(Representatives).Append("\n");
            sb.Append("  AuthorizedClerks: ").Append(AuthorizedClerks).Append("\n");
            sb.Append("  Partners: ").Append(Partners).Append("\n");
            sb.Append("  RegistrationLegalDate: ").Append(RegistrationLegalDate).Append("\n");
            sb.Append("  RegistrationDenialDate: ").Append(RegistrationDenialDate).Append("\n");
            sb.Append("  RegistrationDenialBasis: ").Append(RegistrationDenialBasis).Append("\n");
            sb.Append("  RestorationDate: ").Append(RestorationDate).Append("\n");
            sb.Append("  RestorationBasis: ").Append(RestorationBasis).Append("\n");
            sb.Append("  RemovalDate: ").Append(RemovalDate).Append("\n");
            sb.Append("  RemovalBasis: ").Append(RemovalBasis).Append("\n");
            sb.Append("  AccountNumbers: ").Append(AccountNumbers).Append("\n");
            sb.Append("  HasVirtualAccounts: ").Append(HasVirtualAccounts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Entity);
        }

        /// <summary>
        /// Returns true if Entity instances are equal
        /// </summary>
        /// <param name="input">Instance of Entity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Entity input)
        {
            if (input == null)
                return false;

            return
                (
                    Name == input.Name ||
                    Name != null &&
                    Name.Equals(input.Name)
                ) &&
                (
                    Nip == input.Nip ||
                    Nip != null &&
                    Nip.Equals(input.Nip)
                ) &&
                (
                    StatusVat == input.StatusVat ||
                    StatusVat != null &&
                    StatusVat.Equals(input.StatusVat)
                ) &&
                (
                    Regon == input.Regon ||
                    Regon != null &&
                    Regon.Equals(input.Regon)
                ) &&
                (
                    Pesel == input.Pesel ||
                    Pesel != null &&
                    Pesel.Equals(input.Pesel)
                ) &&
                (
                    Krs == input.Krs ||
                    Krs != null &&
                    Krs.Equals(input.Krs)
                ) &&
                (
                    ResidenceAddress == input.ResidenceAddress ||
                    ResidenceAddress != null &&
                    ResidenceAddress.Equals(input.ResidenceAddress)
                ) &&
                (
                    WorkingAddress == input.WorkingAddress ||
                    WorkingAddress != null &&
                    WorkingAddress.Equals(input.WorkingAddress)
                ) &&
                (
                    Representatives == input.Representatives ||
                    Representatives != null &&
                    input.Representatives != null &&
                    Representatives.SequenceEqual(input.Representatives)
                ) &&
                (
                    AuthorizedClerks == input.AuthorizedClerks ||
                    AuthorizedClerks != null &&
                    input.AuthorizedClerks != null &&
                    AuthorizedClerks.SequenceEqual(input.AuthorizedClerks)
                ) &&
                (
                    Partners == input.Partners ||
                    Partners != null &&
                    input.Partners != null &&
                    Partners.SequenceEqual(input.Partners)
                ) &&
                (
                    RegistrationLegalDate == input.RegistrationLegalDate ||
                    RegistrationLegalDate != null &&
                    RegistrationLegalDate.Equals(input.RegistrationLegalDate)
                ) &&
                (
                    RegistrationDenialDate == input.RegistrationDenialDate ||
                    RegistrationDenialDate != null &&
                    RegistrationDenialDate.Equals(input.RegistrationDenialDate)
                ) &&
                (
                    RegistrationDenialBasis == input.RegistrationDenialBasis ||
                    RegistrationDenialBasis != null &&
                    RegistrationDenialBasis.Equals(input.RegistrationDenialBasis)
                ) &&
                (
                    RestorationDate == input.RestorationDate ||
                    RestorationDate != null &&
                    RestorationDate.Equals(input.RestorationDate)
                ) &&
                (
                    RestorationBasis == input.RestorationBasis ||
                    RestorationBasis != null &&
                    RestorationBasis.Equals(input.RestorationBasis)
                ) &&
                (
                    RemovalDate == input.RemovalDate ||
                    RemovalDate != null &&
                    RemovalDate.Equals(input.RemovalDate)
                ) &&
                (
                    RemovalBasis == input.RemovalBasis ||
                    RemovalBasis != null &&
                    RemovalBasis.Equals(input.RemovalBasis)
                ) &&
                (
                    AccountNumbers == input.AccountNumbers ||
                    AccountNumbers != null &&
                    input.AccountNumbers != null &&
                    AccountNumbers.SequenceEqual(input.AccountNumbers)
                ) &&
                (
                    HasVirtualAccounts == input.HasVirtualAccounts ||
                    HasVirtualAccounts != null &&
                    HasVirtualAccounts.Equals(input.HasVirtualAccounts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Nip != null)
                    hashCode = hashCode * 59 + Nip.GetHashCode();
                if (StatusVat != null)
                    hashCode = hashCode * 59 + StatusVat.GetHashCode();
                if (Regon != null)
                    hashCode = hashCode * 59 + Regon.GetHashCode();
                if (Pesel != null)
                    hashCode = hashCode * 59 + Pesel.GetHashCode();
                if (Krs != null)
                    hashCode = hashCode * 59 + Krs.GetHashCode();
                if (ResidenceAddress != null)
                    hashCode = hashCode * 59 + ResidenceAddress.GetHashCode();
                if (WorkingAddress != null)
                    hashCode = hashCode * 59 + WorkingAddress.GetHashCode();
                if (Representatives != null)
                    hashCode = hashCode * 59 + Representatives.GetHashCode();
                if (AuthorizedClerks != null)
                    hashCode = hashCode * 59 + AuthorizedClerks.GetHashCode();
                if (Partners != null)
                    hashCode = hashCode * 59 + Partners.GetHashCode();
                if (RegistrationLegalDate != null)
                    hashCode = hashCode * 59 + RegistrationLegalDate.GetHashCode();
                if (RegistrationDenialDate != null)
                    hashCode = hashCode * 59 + RegistrationDenialDate.GetHashCode();
                if (RegistrationDenialBasis != null)
                    hashCode = hashCode * 59 + RegistrationDenialBasis.GetHashCode();
                if (RestorationDate != null)
                    hashCode = hashCode * 59 + RestorationDate.GetHashCode();
                if (RestorationBasis != null)
                    hashCode = hashCode * 59 + RestorationBasis.GetHashCode();
                if (RemovalDate != null)
                    hashCode = hashCode * 59 + RemovalDate.GetHashCode();
                if (RemovalBasis != null)
                    hashCode = hashCode * 59 + RemovalBasis.GetHashCode();
                if (AccountNumbers != null)
                    hashCode = hashCode * 59 + AccountNumbers.GetHashCode();
                if (HasVirtualAccounts != null)
                    hashCode = hashCode * 59 + HasVirtualAccounts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
