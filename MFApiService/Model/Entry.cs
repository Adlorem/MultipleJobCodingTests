/* 
 * API Rejestr WL
 *
 * Rejestr Podatnik贸w VAT
 *
 * OpenAPI spec version: 1.6.0
 * Contact: WykazPodatnikow@mf.gov.pl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = MFApiService.Client.SwaggerDateConverter;

namespace MFApiService.Model
{
    /// <summary>
    /// Entry
    /// </summary>
    [DataContract]
    public partial class Entry : IEquatable<Entry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Entry" /> class.
        /// </summary>
        /// <param name="identifier">Przekazany identyfikator (Nip, Regon, Numer rachunku bankowego)  (required).</param>
        /// <param name="subjects">Lista podmiot贸w (required).</param>
        public Entry(string identifier = default, List<Entity> subjects = default)
        {
            // to ensure "identifier" is required (not null)
            if (identifier == null)
            {
                throw new InvalidDataException("identifier is a required property for Entry and cannot be null");
            }
            else
            {
                Identifier = identifier;
            }
            // to ensure "subjects" is required (not null)
            if (subjects == null)
            {
                throw new InvalidDataException("subjects is a required property for Entry and cannot be null");
            }
            else
            {
                Subjects = subjects;
            }
        }

        /// <summary>
        /// Przekazany identyfikator (Nip, Regon, Numer rachunku bankowego) 
        /// </summary>
        /// <value>Przekazany identyfikator (Nip, Regon, Numer rachunku bankowego) </value>
        [DataMember(Name = "identifier", EmitDefaultValue = false)]
        public string Identifier { get; set; }

        /// <summary>
        /// Lista podmiot贸w
        /// </summary>
        /// <value>Lista podmiot贸w</value>
        [DataMember(Name = "subjects", EmitDefaultValue = false)]
        public List<Entity> Subjects { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Entry {\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  Subjects: ").Append(Subjects).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Entry);
        }

        /// <summary>
        /// Returns true if Entry instances are equal
        /// </summary>
        /// <param name="input">Instance of Entry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Entry input)
        {
            if (input == null)
                return false;

            return
                (
                    Identifier == input.Identifier ||
                    Identifier != null &&
                    Identifier.Equals(input.Identifier)
                ) &&
                (
                    Subjects == input.Subjects ||
                    Subjects != null &&
                    input.Subjects != null &&
                    Subjects.SequenceEqual(input.Subjects)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Identifier != null)
                    hashCode = hashCode * 59 + Identifier.GetHashCode();
                if (Subjects != null)
                    hashCode = hashCode * 59 + Subjects.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
